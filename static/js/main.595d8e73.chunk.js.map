{"version":3,"sources":["assets/Images/home.jpg","components/Rest/BurgerBtn.js","components/Rest/Social.js","components/Pages/Navigation/Menu.js","components/Pages/Navigation/NavBar.js","components/Pages/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BurgerBtn","onClick","BurgerContainer","BurgerLine","styled","div","Social","SocialContainer","SocialList","SocialLi","SocialAnchor","href","a","ul","li","Menu","MenuContainer","style","listStyleType","StyledLink","to","Link","NavBar","useState","show","setShow","isOpen","setIsOpen","NavContainer","nav","animate","variants","open","opacity","closed","Home","Wrapper","Back","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,kC,4rBCG5B,SAASC,EAAT,GAAiC,IAAZC,EAAW,EAAXA,QAClC,OACE,kBAACC,EAAD,CAAiBD,QAASA,GACxB,kBAACE,EAAD,MACA,kBAACA,EAAD,OAKN,IAAMD,EAAkBE,IAAOC,IAAV,KAefF,EAAaC,IAAOC,IAAV,K,ilBCvBD,SAASC,IACtB,OACE,kBAACC,EAAD,KACE,kBAACC,EAAD,KACE,kBAACC,EAAD,KACE,kBAACC,EAAD,CAAcC,KAAK,IACjB,kBAAC,IAAD,QAGJ,kBAACF,EAAD,KACE,kBAACC,EAAD,CAAcC,KAAK,IACjB,kBAAC,IAAD,QAGJ,kBAACF,EAAD,KACE,kBAACC,EAAD,CAAcC,KAAK,IACjB,kBAAC,IAAD,UAQZ,IAAMJ,EAAkBH,IAAOC,IAAV,KASfK,EAAeN,IAAOQ,EAAV,KAKZJ,EAAaJ,IAAOS,GAAV,KAOVJ,EAAWL,IAAOU,GAAV,K,2cC5CC,SAASC,IACtB,OACE,oCACE,kBAACC,EAAD,KACE,wBAAIC,MAAO,CAAEC,cAAe,SAC1B,4BACE,kBAACC,EAAD,CAAYC,GAAG,KAAf,SAEF,4BACE,kBAACD,EAAD,CAAYC,GAAG,gBAAf,gBAEF,4BACE,kBAACD,EAAD,CAAYC,GAAG,WAAf,WAEF,4BACE,kBAACD,EAAD,CAAYC,GAAG,SAAf,SAEF,kBAACd,EAAD,SAOV,IAAMU,EAAgBZ,IAAOC,IAAV,KAYbc,EAAaf,YAAOiB,IAAPjB,CAAH,K,qICnCD,SAASkB,IAAU,IAAD,EACPC,oBAAS,GADF,mBACxBC,EADwB,KAClBC,EADkB,OAEHF,oBAAS,GAFN,mBAExBG,EAFwB,KAEhBC,EAFgB,KAW/B,OACE,kBAACC,EAAD,KACGJ,EACC,kBAAC,IAAOK,IAAR,CAAYC,QAASJ,EAAS,OAAS,SAAUK,SAPtC,CACfC,KAAM,CAAEC,QAAS,GACjBC,OAAQ,CAAED,QAAS,KAMb,kBAAClB,EAAD,OAEA,KACJ,kBAACf,EAAD,CAAWC,QAfE,WACf0B,GAAWD,GACXD,GAAQ,OAkBZ,IAAMG,EAAexB,IAAOC,IAAV,K,oMCzBH,SAAS8B,IACtB,OACE,kBAACC,EAAD,KACE,kBAACd,EAAD,OAKN,IAAMc,EAAUhC,IAAOC,IAAV,IACagC,KCEXC,MAVf,WACE,OACE,oCACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWL,OCGfM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.595d8e73.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/home.9e5beeb1.jpg\";","import React from \"react\";\nimport styled from \"styled-components\";\n\nexport default function BurgerBtn({ onClick }) {\n  return (\n    <BurgerContainer onClick={onClick}>\n      <BurgerLine />\n      <BurgerLine />\n    </BurgerContainer>\n  );\n}\n\nconst BurgerContainer = styled.div`\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  top: 0;\n  right: 0;\n  height: 50px;\n  width: 50px;\n  border-left: 1px solid black;\n  border-bottom: 1px solid black;\n  background: rgba(0, 0, 0, 0.4);\n`;\n\nconst BurgerLine = styled.div`\n  border-bottom: 1px solid lightgray;\n  margin: 3px 0;\n  width: 30px;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { FaGithub, FaLinkedin, FaFacebook } from \"react-icons/fa\";\n\nexport default function Social() {\n  return (\n    <SocialContainer>\n      <SocialList>\n        <SocialLi>\n          <SocialAnchor href=\"\">\n            <FaLinkedin />\n          </SocialAnchor>\n        </SocialLi>\n        <SocialLi>\n          <SocialAnchor href=\"\">\n            <FaGithub />\n          </SocialAnchor>\n        </SocialLi>\n        <SocialLi>\n          <SocialAnchor href=\"\">\n            <FaFacebook />\n          </SocialAnchor>\n        </SocialLi>\n      </SocialList>\n    </SocialContainer>\n  );\n}\n\nconst SocialContainer = styled.div`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: calc(80vw - 50px);\n  height: 50px;\n  border-top: 1px solid lightgray;\n`;\n\nconst SocialAnchor = styled.a`\n  color: white;\n  font-size: 20px;\n`;\n\nconst SocialList = styled.ul`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  list-style-type: none;\n`;\n\nconst SocialLi = styled.li`\n  margin: 15px 15px 0 15px;\n`;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport Social from \"../../Rest/Social\";\n\nexport default function Menu() {\n  return (\n    <>\n      <MenuContainer>\n        <ul style={{ listStyleType: \"none\" }}>\n          <li>\n            <StyledLink to=\"/\">Home</StyledLink>\n          </li>\n          <li>\n            <StyledLink to=\"/destination\">Destination</StyledLink>\n          </li>\n          <li>\n            <StyledLink to=\"/places\">Places</StyledLink>\n          </li>\n          <li>\n            <StyledLink to=\"/news\">News</StyledLink>\n          </li>\n          <Social />\n        </ul>\n      </MenuContainer>\n    </>\n  );\n}\n\nconst MenuContainer = styled.div`\n  background: rgba(0, 0, 0, 0.7);\n  border-right: 1px solid black;\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  width: calc(80vw - 50px);\n`;\n\nconst StyledLink = styled(Link)`\n  color: white;\n  font-size: 25px;\n  text-decoration: none;\n  margin: 5px 0;\n`;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { motion } from \"framer-motion\";\nimport BurgerBtn from \"../../Rest/BurgerBtn\";\nimport Menu from \"./Menu\";\n\nexport default function NavBar() {\n  const [show, setShow] = useState(false);\n  const [isOpen, setIsOpen] = useState(true);\n  const showMenu = () => {\n    setIsOpen(!isOpen);\n    setShow(true);\n  };\n  const variants = {\n    open: { opacity: 0 },\n    closed: { opacity: 1 },\n  };\n  return (\n    <NavContainer>\n      {show ? (\n        <motion.nav animate={isOpen ? \"open\" : \"closed\"} variants={variants}>\n          <Menu />\n        </motion.nav>\n      ) : null}\n      <BurgerBtn onClick={showMenu} />\n    </NavContainer>\n  );\n}\n\nconst NavContainer = styled.div`\n  height: 50px;\n  /* border-bottom: 1px solid lightgray; */\n`;\n","import React from \"react\";\nimport NavBar from \"../Navigation/NavBar\";\nimport styled from \"styled-components\";\nimport Back from \"../../../assets/Images/home.jpg\";\nexport default function Home() {\n  return (\n    <Wrapper>\n      <NavBar />\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  background-image: url(${Back});\n  background-size: cover;\n  background-position: center;\n  height: 100vh;\n`;\n","import React from \"react\";\nimport \"./App.css\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Home from \"./components/Pages/Home/Home\";\n\nfunction App() {\n  return (\n    <>\n      <Switch>\n        <Route path=\"/\" component={Home} />\n      </Switch>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}